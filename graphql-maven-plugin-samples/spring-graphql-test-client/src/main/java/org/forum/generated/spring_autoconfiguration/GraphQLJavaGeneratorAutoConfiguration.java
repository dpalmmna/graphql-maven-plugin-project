/** Generated by the default template from graphql-java-generator */
package org.forum.generated.spring_autoconfiguration;

import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.graphql.client.GraphQlClient;
import org.springframework.graphql.client.HttpGraphQlClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.Builder;

/**
 * This Spring {@link Configuration} class defines the Spring Bean for this GraphQL schema.
 * 
 * @author etienne-sf
 */
@AutoConfiguration
public class GraphQLJavaGeneratorAutoConfiguration {

	@Value(value = "${graphql.endpoint.url}")
	private String graphqlEndpointUrl;

	/**
	 * This beans defines the GraphQL endpoint for the current GraphQL schema, as a {@link String}. The
	 * <I>application.properties</I> must define the GraphQL URL endpoint in the <I>graphql.endpoint.url</I> property.
	 * 
	 * 
	 * @return Returns the value of the <I>graphql.endpoint.url</I> application property.
	 * @see https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphqlEndpoint")
	String graphqlEndpoint() {
		return graphqlEndpointUrl;
	}

	/**
	 * The Spring reactive {@link WebClient} that will execute the HTTP requests for GraphQL queries and mutations.<BR/>
	 * This bean is only created if no such bean already exists
	 */
	@Bean
	@ConditionalOnMissingBean(name = "webClient")
	WebClient webClient(//
			@Autowired(required = true) String graphqlEndpoint //
	// @Autowired(required = false) CodecCustomizer codecCustomizer,
	// @Autowired(required = false) @Qualifier("httpClient") HttpClientErrorException httpClient,
	// @Autowired(required = false) @Qualifier("serverOAuth2AuthorizedClientExchangeFilterFunction")
	// ServerOAuth2AuthorizedClientExchangeFilterFunction serverOAuth2AuthorizedClientExchangeFilterFunction
	) {
		Builder webClientBuilder = WebClient.builder()//
				.baseUrl(graphqlEndpoint)//
				.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
				.defaultUriVariables(Collections.singletonMap("url", graphqlEndpoint));

		// if (codecCustomizer != null) {
		// webClientBuilder.codecs(configurer -> codecCustomizer.customize(configurer));
		// }

		// if (httpClient != null) {
		// webClientBuilder.clientConnector(new ReactorClientHttpConnector(httpClient));
		// }
		// if (serverOAuth2AuthorizedClientExchangeFilterFunction != null) {
		// webClientBuilder.filter(serverOAuth2AuthorizedClientExchangeFilterFunction);
		// }
		// if (filters != null) {
		// for (ExchangeFilterFunction filter : filters) {
		// if (filter != null) {
		// webClientBuilder.filter(filter);
		// }
		// }
		// }

		return webClientBuilder.build();
	}

	@Bean
	@ConditionalOnMissingBean(name = "graphQlClient")
	GraphQlClient graphQlClient(WebClient webClient) {
		return HttpGraphQlClient.builder(webClient).build();
	}

}
