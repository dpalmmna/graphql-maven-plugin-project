#set( $D = '$' )
##
## Maven ignores the default value for springBeanSuffix, and replaces it by a null value. In this case, we replace the value by an empty String 
#if (!$configuration.springBeanSuffix) #set($springBeanSuffix="") #else #set($springBeanSuffix = ${configuration.springBeanSuffix}) #end
##
/** Generated by the default template from graphql-java-generator */
package ${configuration.springAutoConfigurationPackage};

import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.web.codec.CodecCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.Builder;

/**
 * This Spring {@link Configuration} class defines the Spring Bean for this GraphQL schema.
 * 
 * @author etienne-sf
 */
@Configuration("springConfiguration${springBeanSuffix}") // The name of this bean will be springConfiguration${springBeanSuffix}
@ComponentScan("${packageUtilName}")
@SuppressWarnings("unused")
public class GraphQLJavaGeneratorAutoConfiguration${springBeanSuffix} {

	@Value(value = "${D}{graphql.endpoint${springBeanSuffix}.url}")
	private String graphqlEndpoint${springBeanSuffix}Url;

	/**
	 * This beans defines the GraphQL endpoint for the current GraphQL schema, as a {@link String}. The <I>application.properties</I> 
	 * must define the GraphQL URL endpoint in the <I>graphql.endpoint${springBeanSuffix}.url</I> property.
	 * 
	 * 
	 * @return Returns the value of the <I>graphql.endpoint${springBeanSuffix}.url</I> application property.
	 * @see https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphqlEndpoint${springBeanSuffix}")
	String graphqlEndpoint${springBeanSuffix}() {
		return graphqlEndpoint${springBeanSuffix}Url;
	}

	/**
	 * This beans defines the GraphQL endpoint for subscriptions for the ${springBeanSuffix} server, as a {@link String}. If
	 * null, then the {@link #graphqlEndpoint()} url is used, which is the default.
	 * 
	 * @return Returns the value of the <I>graphql.endpoint.subscriptionUrl</I> application property.
	 * @see https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphqlSubscriptionEndpoint${springBeanSuffix}")
	@Deprecated
	String graphqlSubscriptionEndpoint${springBeanSuffix}() {
		return graphqlEndpoint${springBeanSuffix}SubscriptionUrl;
	}

	/**
	 * The Spring reactive {@link WebClient} that will execute the HTTP requests for GraphQL queries and mutations.<BR/>
	 * This bean is only created if no such bean already exists
	 */
	@Bean
	@ConditionalOnMissingBean(name = "webClient${springBeanSuffix}")
	public WebClient webClient${springBeanSuffix}(String graphqlEndpoint${springBeanSuffix}) {
		return webClientBuilder = WebClient.builder()//
				.baseUrl(graphqlEndpoint)//
				.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) //
				.defaultUriVariables(Collections.singletonMap("url", graphqlEndpoint)) //
				.build();
	}

	@Bean
	@ConditionalOnMissingBean(name = "graphQlClient")
	GraphQlClient graphQlClient(WebClient webClient) {
		return HttpGraphQlClient.builder(webClient).build();
	}

}
