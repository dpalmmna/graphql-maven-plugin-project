/** Generated by the default template from graphql-java-generator */
package ${packageUtilName};

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.DataLoader;
import org.forum.generated.Post;
import org.forum.generated.util.DataFetchersDelegatePost;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.graphql.execution.BatchLoaderRegistry;
import org.springframework.stereotype.Controller;

import graphql.schema.DataFetchingEnvironment;
import reactor.core.publisher.Mono;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
@SuppressWarnings("unused")
public class ${entity}Controller {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(${entity}Controller.class);

	@Autowired
	protected ${dataFetchersDelegate.pascalCaseName} ${dataFetchersDelegate.camelCaseName};

#foreach ($dataFetcher in $dataFetchersDelegate.dataFetchers)

	/**
	 * This method loads the data for ${dataFetcher.graphQLType}.${dataFetcher.field.name}. <BR/>
	 * For optimization, this method returns a CompletableFuture. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server.<BR/>
	 * The principle is this one: The data loader collects all the data to load, avoid to load several times the same
	 * data, and allows parallel execution of the queries, if multiple queries are to be run.<BR/>
	 * You can implements this method like this:
	 * 
	 * <PRE>
	 * &#64;Override
	 * public CompletableFuture<List<Character>> friends(DataFetchingEnvironment environment,
	 * 		DataLoader<Long, Member> dataLoader, Human origin) {
	 * 	List<java.lang.Long> friendIds = origin.getFriendIds();
	 * 	DataLoader<java.lang.Long, CharacterImpl> dataLoader = environment.getDataLoader("Character");
	 * 	return dataLoader.loadMany(friendIds);
	 * }
	 * </PRE>
	 * 
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment
	 *            The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this
	 *            DataFetcher
	 * @param dataLoader
	 *            The {@link DataLoader} allows to load several data in one query. It allows to solve the (n+1) queries
	 *            issues, and greatly optimizes the response time.<BR/>
	 *            You'll find more informations here: <A HREF=
	 *            "https://github.com/graphql-java/java-dataloader">https://github.com/graphql-java/java-dataloader</A>
	 * @param origin
	 *            The object from which the field is fetch. In other word: the aim of this data fetcher is to fetch the
	 *            author attribute of the <I>origin</I>, which is an instance of {ObjectType {name:Post,
	 *            fields:{Field{name:id, type:ID!, params:[]},Field{name:date, type:Date!, params:[]},Field{name:author,
	 *            type:Member, params:[]},Field{name:publiclyAvailable, type:Boolean, params:[]},Field{name:title,
	 *            type:String!, params:[]},Field{name:content, type:String!, params:[]},Field{name:authorId, type:ID,
	 *            params:[]},Field{name:topicId, type:ID, params:[]}}, comments ""}. It depends on your data modle, but
	 *            it typically contains the id to use in the query.
	 * @throws NoSuchElementException
	 *             This method may return a {@link NoSuchElementException} exception. In this case, the exception is
	 *             trapped by the calling method, and the return is consider as null. This allows to use the
	 *             {@link Optional#get()} method directly, without caring of whether or not there is a value. The
	 *             generated code will take care of the {@link NoSuchElementException} exception.
	 */
@SchemaMapping(field = "author") // This annotation is used to maintain compatibility with earlier version of the
// plugin. Code that uses Spring Boot annotations should use remove this method
// and use the @BatchMapping annotation instead
#set returnType=#if(${dataFetcher.completableFuture})CompletableFuture<#end#if(${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")Publisher<#if($dataFetcher.field.fieldTypeAST.mandatory==false)Optional<#end#end${dataFetcher.field.javaTypeFullClassname}#if(${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")#if($dataFetcher.field.fieldTypeAST.mandatory==false)>#end>#end#if(${dataFetcher.completableFuture})>#end
	public $returnType ${dataFetcher.field.javaName}(DataFetchingEnvironment dataFetchingEnvironment
#if(${dataFetcher.completableFuture})			, DataLoader<java.lang.Long, org.forum.generated.Topic> dataLoader#end
#if($dataFetcher.graphQLOriginType)			, xxx origin dataLoader#end

Liste des arguments
			)


	
TODO finish here

	${dataFetchersDelegate.camelCaseName}${dataFetcher.pascalCaseName}#if(${dataFetcher.completableFuture})WithDataLoader#end() {
		return dataFetchingEnvironment -> {
#foreach ($argument in $dataFetcher.field.inputParameters)          
## $argument is an instance of Field
#if(${argument.fieldTypeAST.listDepth})
			@SuppressWarnings("unchecked")
#end
			${argument.javaTypeFullClassname} ${argument.javaName} = (${argument.javaTypeFullClassname}) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("${argument.name}"), "${argument.graphQLTypeSimpleName}", "${configuration.javaTypeForIDType}", ${argument.type.classFullName}.class);
#end  ##Foreach
#if($dataFetcher.graphQLOriginType)
			${dataFetcher.graphQLOriginType.classFullName} source = dataFetchingEnvironment.getSource();
#end

#if (${dataFetcher.completableFuture})
			DataLoader<${dataFetcher.field.type.identifier.javaTypeFullClassname}, ${dataFetcher.field.type.classFullName}> dataLoader = dataFetchingEnvironment.getDataLoader("${dataFetcher.field.type.classSimpleName}"); 
			
			// This dataLoader may be null. Let's handle that:
			if (dataLoader != null) { 
				return ${dataFetchersDelegate.camelCaseName}.${dataFetcher.javaName}(dataFetchingEnvironment, dataLoader#if($dataFetcher.graphQLOriginType), source#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaName}#end);
			} else {
				logger.warn("No DataLoader found for key '{}'", "${dataFetcher.field.type.classSimpleName}");
				return CompletableFuture.supplyAsync(
						() -> ${dataFetchersDelegate.camelCaseName}.${dataFetcher.javaName}(dataFetchingEnvironment#if($dataFetcher.graphQLOriginType), source#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaName}#end));
			}
#elseif (${dataFetcher.field.fieldTypeAST.listDepth}>0)
			#if (${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")Publisher<#if($dataFetcher.field.fieldTypeAST.mandatory==false)Optional<#end#end${dataFetcher.field.javaTypeFullClassname}#if(${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")#if($dataFetcher.field.fieldTypeAST.mandatory==false)>#end>#end ret = ${dataFetchersDelegate.camelCaseName}.${dataFetcher.javaName}(dataFetchingEnvironment#if($dataFetcher.graphQLOriginType), source#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaName}#end);
#if (${dataFetcher.dataFetcherDelegate.type.requestType}!="subscription")
			logger.debug("${dataFetcher.name}: {} found rows", (ret==null) ? 0 : ret.size());
#end

			return ret;
#else
			#if(${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")Publisher<#if($dataFetcher.field.fieldTypeAST.mandatory==false)Optional<#end#end${dataFetcher.field.javaTypeFullClassname}#if(${dataFetcher.dataFetcherDelegate.type.requestType}=="subscription")#if($dataFetcher.field.fieldTypeAST.mandatory==false)>#end>#end ret = null;
			try {
				ret = ${dataFetchersDelegate.camelCaseName}.${dataFetcher.javaName}(dataFetchingEnvironment#if($dataFetcher.graphQLOriginType), source#end#foreach($argument in $dataFetcher.field.inputParameters), ${argument.javaName}#end);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("${dataFetcher.name}: 1 result found");
			else
				logger.debug("${dataFetcher.name}: no result found");

			return ret;
#end
		};
	}

#end
}
