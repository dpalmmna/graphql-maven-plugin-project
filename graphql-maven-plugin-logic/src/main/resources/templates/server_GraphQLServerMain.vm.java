/** Generated by the default template from graphql-java-generator */
package ${packageUtilName};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.graphql.GraphQlSourceBuilderCustomizer;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.core.io.ClassPathResource;
import org.springframework.graphql.execution.ClassNameTypeResolver;

#if($configuration.generateJPAAnnotation)
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
#end

import com.graphql_java_generator.server.util.GraphQLServerUtils;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@SpringBootApplication()
@ComponentScan(basePackages = { "${configuration.packageName}", "com.graphql_java_generator.server", "com.graphql_java_generator.util" ${configuration.quotedScanBasePackages}})
#if($configuration.generateJPAAnnotation)
@EnableJpaRepositories(basePackages = { "${configuration.packageName}", "com.graphql_java_generator" ${configuration.quotedScanBasePackages} })
@EntityScan(basePackages = { "${configuration.packageName}", "com.graphql_java_generator" ${configuration.quotedScanBasePackages} })
#end
@EnableConfigurationProperties
@SuppressWarnings("unused")
public class GraphQLServerMain#if(${configuration.packaging}=="war") extends SpringBootServletInitializer#end {

	@Autowired
	protected ApplicationContext applicationContext;

	@Autowired
	GraphQLServerUtils graphQLServerUtils;

#if($packaging=="war")
	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(GraphQLServerMain.class);
	}
#end

	public static void main(String[] args) {
		SpringApplication.run(GraphQLServerMain.class, args);
	}

#if($configuration.parserOptions && $configuration.parserOptions.maxTokens)
	public GraphQLServerMain() {
		// Configuration of the GraphQL schema parser, from the project configuration
		ParserOptions newDefault = ParserOptions.newParserOptions().maxTokens(${configuration.parserOptions.maxTokens}).build();
		ParserOptions.setDefaultParserOptions(newDefault);
	}
#end

	@Bean
	public GraphQlSourceBuilderCustomizer sourceBuilderCustomizer() {
		ClassNameTypeResolver classNameTypeResolver = new ClassNameTypeResolver();
		classNameTypeResolver.setClassNameExtractor((cls) -> {
			return graphQLServerUtils.classNameExtractor(cls);
		});
		return (builder) -> builder
#if($configuration.addRelayConnections)
## When addRelayConnections is true, then graphql-java should use the Generated schema, instead of the source schema
				.schemaResources(new ClassPathResource("/${configuration.defaultTargetSchemaFileName}"))
#end
				.defaultTypeResolver(classNameTypeResolver);
	}
}
